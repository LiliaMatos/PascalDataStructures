CountNodes
BaseCases
  if Node = nil, return 0
  if Node^Left and Node^Right = nil, return 1
Recursivity
  if Node^Left = nil, return CountNodes(Node^Right) + 1
  if Node^Right = nil, return CountNodes(Node^Left) + 1
  else CountNodes(Node^Left) + CountNodes(Node^Right) + 1

CountLeafs
BaseCases
  if Node = nil, return 0
  if Node^Left and Node^Right = nil, return 1
Recursivity
  return CountLeafs(Node^Left) + CountLeafs(Node^Right)

Count(Even/Odd)
BaseCases
  if Node = nil, return 0
  if(Node^Left and Node^Right = nil) AND Node^Data (Even/Odd) return (1 or 0)
Recursivity
  if Node^Left = nil, return Count(Node^Right) + 1 if Node^Data(Even/Odd) or 0
  if Node^Right = nil, return Count(Node^Left) + 1 if Node^Data(Even/Odd) or 0
  else
    return Count(Node^Left) + Count(Node^Right) +1 ifNode^Data(Even/Odd) or 0

BinarySearch(value)
BaseCases
  if Node = nil, return False
  if Node^Data = Value, return True
Recursivity
  if value < Node^Data, return BinarySearch(Node^Left)
  if value >= Node^Data, return BinarySearch(Node^Right)
  
